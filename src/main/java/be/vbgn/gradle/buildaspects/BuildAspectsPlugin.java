/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package be.vbgn.gradle.buildaspects;

import be.vbgn.gradle.buildaspects.project.dsl.BuildAspectsLeaf;
import be.vbgn.gradle.buildaspects.project.dsl.BuildAspectsParent;
import be.vbgn.gradle.buildaspects.project.dsl.BuildComponents;
import be.vbgn.gradle.buildaspects.project.project.ComponentProject;
import be.vbgn.gradle.buildaspects.project.project.ComponentProjectFactory;
import be.vbgn.gradle.buildaspects.settings.dsl.BuildAspects;
import be.vbgn.gradle.buildaspects.settings.project.ComponentProjectDescriptor;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;
import org.gradle.api.Plugin;
import org.gradle.api.initialization.Settings;

public class BuildAspectsPlugin implements Plugin<Settings> {

    @Override
    public void apply(Settings settings) {
        BuildAspects buildAspects = settings.getExtensions().create("buildAspects", BuildAspects.class, settings);
        ComponentProjectFactory componentProjectFactory = new ComponentProjectFactory(
                buildAspects.getComponentProjects());
        settings.getGradle().allprojects(project -> {
            // Applies if project is a leaf project
            componentProjectFactory.createComponentProject(project)
                    .ifPresent(cp -> {
                        project.getExtensions()
                                .add("buildComponents", new BuildComponents(cp.getComponent()));
                        project.getExtensions()
                                .create("buildAspects", BuildAspectsLeaf.class, project, cp.getComponent());
                    });

            // Applies if project has subprojects that are components
            Set<ComponentProject> componentProjects = componentProjectFactory.createComponentProjectsForParent(project);
            if (!componentProjects.isEmpty()) {
                project.getExtensions()
                        .create("buildAspects", BuildAspectsParent.class, project, componentProjects);
            }

        });
    }
}
